{"version":3,"sources":["../lib/p5.serialport.js","../../../../../../../usr/local/lib/node_modules/parcel-bundler/src/builtins/hmr-runtime.js"],"names":["root","factory","define","amd","p5","SerialPort","_hostname","_serverport","self","bufferSize","serialBuffer","serialConnected","serialport","serialoptions","emitQueue","clientData","serialportList","hostname","serverport","socket","WebSocket","console","log","err","errorCallback","onopen","event","connectedCallback","length","i","emit","onmessage","messageObject","JSON","parse","data","method","openCallback","push","dataCallback","rawDataCallback","listCallback","closeCallback","onclose","onerror","prototype","readyState","OPEN","send","stringify","isConnected","list","cb","open","_serialport","_serialoptions","write","toWrite","Array","isArray","read","shift","readChar","String","fromCharCode","readBytes","returnBuffer","slice","readBytesUntil","charToFind","charCodeAt","index","indexOf","readString","stringBuffer","join","readStringUntil","stringToFind","returnString","foundIndex","substr","readLine","available","last","pop","lastChar","clear","stop","close","onData","_callback","on","onOpen","onClose","onError","onList","onConnected","onRawData","_event","OVERLAY_ID","OldModule","module","bundle","Module","moduleName","call","hot","hotData","_acceptCallbacks","_disposeCallbacks","accept","fn","dispose","checkedAssets","assetsToAccept","parent","isParcelRequire","location","protocol","ws","type","handled","assets","forEach","asset","isNew","didAccept","hmrAcceptCheck","global","parcelRequire","id","every","generated","js","hmrApply","v","hmrAcceptRun","reload","removeErrorOverlay","error","message","stack","overlay","createErrorOverlay","document","body","appendChild","getElementById","remove","createElement","stackTrace","innerText","innerHTML","getParents","modules","parents","k","d","dep","concat","Function","deps","cached","cache","some"],"mappings":"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","file":"p5.serialport.a31d7886.js","sourceRoot":"../src","sourcesContent":["/*! p5.serialport.js v0.0.1 2015-07-23 */\n/**\n * @module p5.serialport\n * @submodule p5.serialport\n * @for p5.serialport\n * @main\n */\n/**\n *  p5.serialport\n *  Shawn Van Every (Shawn.Van.Every@nyu.edu)\n *  ITP/NYU\n *  LGPL\n *\n *  https://github.com/vanevery/p5.serialport\n *\n */\n(function(root, factory) {\n  if (typeof define === 'function' && define.amd)\n    define('p5.serialport', ['p5'], function(p5) {\n      (factory(p5));\n    });\n  /*else if (typeof exports === 'object')\n    factory(require('../p5'));*/\n  else\n    factory(root['p5']);\n}(this, function(p5) {\n\n  // =============================================================================\n  //                         p5.SerialPort\n  // =============================================================================\n\n\n  /**\n   * Base class for a serial port. Creates an instance of the serial library and prints \"hostname\":\"serverPort\" in the console.\n   *\n   * @class p5.SerialPort\n   * @constructor\n   * @param {String} [hostname] Name of the host. Defaults to 'localhost'.\n   * @param {Number} [serverPort] Port number. Defaults to 8081.\n   * @example\n   * \tvar portName = '/dev/cu.usbmodem1411'; //enter your portName\n   *\n   *\tfunction setup() {\n   *\t\t createCanvas(400, 300);\n   *\t\t serial = new p5.SerialPort()\n   *\t\t serial.open(portName);\n   *\t}\n   */\n  p5.SerialPort = function(_hostname, _serverport) {\n    var self = this;\n    this.bufferSize = 1; // How much to buffer before sending data event\n    this.serialBuffer = [];\n    //this.maxBufferSize = 1024;\n    this.serialConnected = false;\n    this.serialport = null;\n    this.serialoptions = null;\n    this.emitQueue = [];\n    this.clientData = {};\n    this.serialportList = [];\n\n    if (typeof _hostname === 'string') {\n      this.hostname = _hostname;\n    } else {\n      this.hostname = \"localhost\";\n    }\n\n    if (typeof _serverport === 'number') {\n      this.serverport = _serverport;\n    } else {\n      this.serverport = 8081;\n    }\n\n    try {\n      this.socket = new WebSocket(\"ws://\" + this.hostname + \":\" + this.serverport);\n      console.log((\"ws://\" + this.hostname + \":\" + this.serverport));\n    } catch (err) {\n      if (typeof self.errorCallback !== \"undefined\") {\n        self.errorCallback(\"Couldn't connect to the server, is it running?\");\n      }\n    }\n\n    this.socket.onopen = function(event) {\n      console.log('opened socket');\n      serialConnected = true;\n\n      if (typeof self.connectedCallback !== \"undefined\") {\n        self.connectedCallback();\n      }\n\n      if (self.emitQueue.length > 0) {\n        for (var i = 0; i < self.emitQueue.length; i ++){\n          self.emit(self.emitQueue[i]);\n        }\n        self.emitQueue = [];\n      }\n    };\n\n    this.socket.onmessage = function(event) {\n      var messageObject = JSON.parse(event.data);\n      // MESSAGE ROUTING\n      if (typeof messageObject.method !== \"undefined\") {\n        if (messageObject.method == 'echo') {\n        } else if (messageObject.method === \"openserial\") {\n          if (typeof self.openCallback !== \"undefined\") {\n            self.openCallback();\n          }\n        } else if (messageObject.method === \"data\") {\n          // Add to buffer, assuming this comes in byte by byte\n          self.serialBuffer.push(messageObject.data);\n          if (typeof self.dataCallback !== \"undefined\") {\n            // Hand it to sketch\n            if (self.serialBuffer.length >= self.bufferSize) {\n              self.dataCallback();\n            }\n          }\n          if (typeof self.rawDataCallback !== \"undefined\") {\n            self.rawDataCallback(messageObject.data);\n          }\n        } else if (messageObject.method === 'list') {\n          self.serialportList = messageObject.data;\n          if (typeof self.listCallback !== \"undefined\") {\n            self.listCallback(messageObject.data);\n          }\n        } else if (messageObject.method === \"close\") {\n          if (typeof self.closeCallback !== \"undefined\") {\n            self.closeCallback();\n          }\n        } else if (messageObject.method === \"write\") {\n          // Success Callback?\n        } else if (messageObject.method === \"error\") {\n          //console.log(messageObject.data);\n          if (typeof self.errorCallback !== \"undefined\") {\n            self.errorCallback(messageObject.data);\n          }\n        } else {\n          // Got message from server without known method\n          console.log(\"Unknown Method: \" + messageObject);\n        }\n      } else {\n        console.log(\"Method Undefined: \" + messageObject);\n      }\n    };\n\n    this.socket.onclose = function(event) {\n      if (typeof self.closeCallback !== \"undefined\") {\n        self.closeCallback();\n      }\n    };\n\n    this.socket.onerror = function(event) {\n      if (typeof self.errorCallback !== \"undefined\") {\n        self.errorCallback();\n      }\n    };\n  };\n\n/**\n *\n * @method emit\n * @private\n * @return\n * @example\n *\n */\n  p5.SerialPort.prototype.emit = function(data) {\n    if (this.socket.readyState == WebSocket.OPEN) {\n      this.socket.send(JSON.stringify(data));\n    } else {\n      this.emitQueue.push(data);\n    }\n  };\n\n/**\n * Tells you whether p5 is connected to the serial port.\n *\n * @method isConnected\n * @return {Boolean} true or false\n * @example\n * \t\tvar serial; // variable to hold an instance of the serialport library\n * \t\tvar portName = '/dev/cu.usbmodem1411';\n *\n * \t\tfunction setup() {\n * \t\t\tcreateCanvas(400, 300);\n *\t \t\tserial = new p5.SerialPort();\n *\t \t\tserial.open(portName);\n *\t \t\tprintln(serial.isConnected());\n * \t\t}\n */\n  p5.SerialPort.prototype.isConnected = function() {\n    if (self.serialConnected) { return true; }\n    else { return false; }\n  };\n\n/**\n * Lists serial ports available to the server.\n * Synchronously returns cached list, asynchronously returns updated list via callback.\n * Must be called within the p5 setup() function.\n * Doesn't work with the p5 editor's \"Run in Browser\" mode.\n *\n * @method list\n * @return {Array} array of available serial ports\n * @example\n * \t\tfunction setup() {\n * \t\tcreateCanvas(windowWidth, windowHeight);\n * \t\tserial = new p5.SerialPort();\n * \t\tserial.list();\n * \t\tserial.open(\"/dev/cu.usbmodem1411\");\n * \t\t}\n *\n * For full example: <a href=\"https://itp.nyu.edu/physcomp/labs/labs-serial-communication/two-way-duplex-serial-communication-using-p5js/\">Link</a>\n * @example\n * \t\tfunction printList(portList) {\n * \t\t  // portList is an array of serial port names\n * \t\t  for (var i = 0; i < portList.length; i++) {\n * \t\t    // Display the list the console:\n * \t\t    println(i + \" \" + portList[i]);\n * \t\t  }\n * \t\t}\n */\n  p5.SerialPort.prototype.list = function(cb) {\n    if (typeof cb === 'function') {\n      this.listCallback = cb;\n    }\n    this.emit({\n      method: 'list',\n      data: {}\n    });\n\n    return this.serialportList;\n  };\n\n/**\n * Opens the serial port to enable data flow.\n * Use the {[serialOptions]} parameter to set the baudrate if it's different from the p5 default, 9600.\n *\n * @method open\n * @param  {String} serialPort Name of the serial port, something like '/dev/cu.usbmodem1411'\n * @param  {Object} [serialOptions] Object with optional options as {key: value} pairs.\n *                                Options include 'baudrate'.\n * @param  {Function} [serialCallback] Callback function when open completes\n * @example\n * \t\t// Change this to the name of your arduino's serial port\n * \t\tserial.open(\"/dev/cu.usbmodem1411\");\n *\n * @example\n * \t\t// All of the following are valid:\n *\t\tserial.open(portName);\n *\t\tserial.open(portName, {}, onOpen);\n *\t\tserial.open(portName, {baudrate: 9600}, onOpen)\n *\n *\t\tfunction onOpen() {\n *\t\t  print('opened the serial port!');\n *\t\t}\n */\n  p5.SerialPort.prototype.open = function(_serialport, _serialoptions, cb) {\n\n    if (typeof cb === 'function') {\n      this.openCallback = cb;\n    }\n\n    this.serialport = _serialport;\n\n    if (typeof _serialoptions === 'object') {\n      this.serialoptions = _serialoptions;\n    } else {\n      //console.log(\"typeof _serialoptions \" + typeof _serialoptions + \" setting to {}\");\n      this.serialoptions = {};\n    }\n    // If our socket is connected, we'll do this now,\n    // otherwise it will happen in the socket.onopen callback\n    this.emit({\n      method: 'openserial',\n      data: {\n        serialport: this.serialport,\n        serialoptions: this.serialoptions\n      }\n    });\n  };\n\n/**\n * Sends a byte to a webSocket server which sends the same byte out through a serial port.\n * @method write\n * @param  {String, Number, Array} Data Writes bytes, chars, ints, bytes[], and strings to the serial port.\n * @example\n * You can use this with the included Arduino example called PhysicalPixel.\n * Works with P5 editor as the socket/serial server, version 0.5.5 or later.\n * Written 2 Oct 2015 by Tom Igoe. For full example: <a href=\"https://github.com/vanevery/p5.serialport/tree/master/examples/writeExample\">Link</a>\n *\n * \t\tfunction mouseReleased() {\n *\t  \t\t  serial.write(outMessage);\n *\t\t\t  if (outMessage === 'H') {\n *\t\t\t    outMessage = 'L';\n *\t\t\t  } else {\n *\t\t\t    outMessage = 'H';\n *\t\t\t  }\n *\t\t}\n *\n * For full example: <a href=\"https://itp.nyu.edu/physcomp/labs/labs-serial-communication/lab-serial-output-from-p5-js/\">Link</a>\n * @example\n * \t\tfunction mouseDragged() {\n *   \t\t  // map the mouseY to a range from 0 to 255:\n *\t\t\t  outByte = int(map(mouseY, 0, height, 0, 255));\n *\t\t\t  // send it out the serial port:\n *\t\t\t  serial.write(outByte);\n *\t\t}\n */\n  p5.SerialPort.prototype.write = function(data) {\n    //Writes bytes, chars, ints, bytes[], Strings to the serial port\n    var toWrite = null;\n    if (typeof data == \"number\") {\n      // This is the only one I am treating differently, the rest of the clauses are meaningless\n      toWrite = [data];\n    } else if (typeof data == \"string\") {\n      toWrite = data;\n    } else if (Array.isArray(data)) {\n      toWrite = data;\n    } else {\n      toWrite = data;\n    }\n\n    this.emit({\n      method: 'write',\n      data: toWrite\n    });\n  };\n\n/**\n * Returns a number between 0 and 255 for the next byte that's waiting in the buffer.\n * Returns -1 if there is no byte, although this should be avoided by first checking available() to see if data is available.\n *\n * @method read\n * @return {Number} Value of the byte waiting in the buffer. Returns -1 if there is no byte.\n * @example\n * \t\tfunction serialEvent() {\n *   \t\tinByte = int(serial.read());\n *\t\t\tbyteCount++;\n *\t\t}\n *\n * @example\n * \t\tfunction serialEvent() {\n *\t  \t\t// read a byte from the serial port:\n *\t\t\tvar inByte = serial.read();\n *\t\t\t// store it in a global variable:\n *\t\t\tinData = inByte;\n *\t\t}\n */\n  p5.SerialPort.prototype.read = function() {\n    if (this.serialBuffer.length > 0) {\n      return this.serialBuffer.shift();\n    } else {\n      return -1;\n    }\n  };\n\n/**\n * Returns the next byte in the buffer as a char.\n *\n * @method readChar\n * @return {String} Value of the Unicode-code unit character byte waiting in the buffer, converted from bytes. Returns -1 or 0xffff if there is no byte.\n * @example\n * \t\tvar inData;\n *\n *\t\tfunction setup() {\n *\t\t  // callback for when new data arrives\n *\t\t  serial.on('data', serialEvent);\n *\n *\t\tfunction serialEvent() {\n *\t\t  // read a char from the serial port:\n *\t\t  inData = serial.readChar();\n *\t\t}\n */\n  p5.SerialPort.prototype.readChar = function() {\n    if (this.serialBuffer.length > 0) {\n      /*var currentByte = this.serialBuffer.shift();\n      console.log(\"p5.serialport.js: \" + currentByte);\n      var currentChar = String.fromCharCode(currentByte);\n      console.log(\"p5.serialport.js: \" + currentChar);\n      return currentChar;\n      */\n      return String.fromCharCode(this.serialBuffer.shift());\n    } else {\n      return -1;\n    }\n  };\n\n/**\n * Returns a number between 0 and 255 for the next byte that's waiting in the buffer, and then clears the buffer of data. Returns -1 if there is no byte, although this should be avoided by first checking available() to see if data is available.\n * @method readBytes\n * @return {Number} Value of the byte waiting in the buffer. Returns -1 if there is no byte.\n * @example\n * \t\tvar inData;\n *\n *\t\tfunction setup() {\n *\t\t  // callback for when new data arrives\n *\t\t  serial.on('data', serialEvent);\n *\n *\t\tfunction serialEvent() {\n *\t\t  // read bytes from the serial port:\n *\t\t  inData = serial.readBytes();\n *\t\t}\n */\n  p5.SerialPort.prototype.readBytes = function() {\n    if (this.serialBuffer.length > 0) {\n      var returnBuffer = this.serialBuffer.slice();\n\n      // Clear the array\n      this.serialBuffer.length = 0;\n\n      return returnBuffer;\n    } else {\n      return -1;\n    }\n  };\n\n/**\n * Returns all of the data available, up to and including a particular character.\n * If the character isn't in the buffer, 'null' is returned.\n * The version without the byteBuffer parameter returns a byte array of all data up to and including the interesting byte.\n * This is not efficient, but is easy to use.\n *\n * The version with the byteBuffer parameter is more efficient in terms of time and memory.\n * It grabs the data in the buffer and puts it into the byte array passed in and returns an integer value for the number of bytes read.\n * If the byte buffer is not large enough, -1 is returned and an error is printed to the message area.\n * If nothing is in the buffer, 0 is returned.\n *\n * @method readBytesUntil\n * @param {[byteBuffer]}\n * @return {[Number]} [Number of bytes read]\n * @example\n *\t\t// All of the following are valid:\n *\t\tcharToFind.charCodeAt();\n *\t\tcharToFind.charCodeAt(0);\n *\t\tcharToFind.charCodeAt(0, );\n */\n  p5.SerialPort.prototype.readBytesUntil = function(charToFind) {\n    console.log(\"Looking for: \" + charToFind.charCodeAt(0));\n    var index = this.serialBuffer.indexOf(charToFind.charCodeAt(0));\n    if (index !== -1) {\n      // What to return\n      var returnBuffer = this.serialBuffer.slice(0, index + 1);\n      // Clear out what was returned\n      this.serialBuffer = this.serialBuffer.slice(index, this.serialBuffer.length + index);\n      return returnBuffer;\n    } else {\n      return -1;\n    }\n  };\n\n/**\n * Returns all the data from the buffer as a String.\n * This method assumes the incoming characters are ASCII.\n * If you want to transfer Unicode data: first, convert the String to a byte stream in the representation of your choice (i.e. UTF8 or two-byte Unicode data).\n * Then, send it as a byte array.\n *\n * @method readString\n * @return\n * @example\n *\n *\n *\n *\n */\n  p5.SerialPort.prototype.readString = function() {\n    //var returnBuffer = this.serialBuffer;\n    var stringBuffer = [];\n    //console.log(\"serialBuffer Length: \" + this.serialBuffer.length);\n    for (var i = 0; i < this.serialBuffer.length; i++) {\n      //console.log(\"push: \" + String.fromCharCode(this.serialBuffer[i]));\n      stringBuffer.push(String.fromCharCode(this.serialBuffer[i]));\n    }\n    // Clear the buffer\n    this.serialBuffer.length = 0;\n    return stringBuffer.join(\"\");\n  };\n\n/**\n * Returns all of the data available as an ASCII-encoded string.\n *\n * @method readStringUntil\n * @param {String} stringToFind String to read until.\n * @return {String} ASCII-encoded string until and not including the stringToFind.\n * @example\n *\n * For full example: <a href=\"https://github.com/tigoe/p5.serialport/blob/master/examples/twoPortRead/sketch.js\">Link</a>\n *\n * \t\t var serial1 = new p5.SerialPort();\n *\t\t var serial2 = new p5.SerialPort();\n *\t\t var input1 = '';\n *\t\t var input2 = '';\n *\n *\t\t function serialEvent(){\n *\t\t \t\tdata = serial1.readStringUntil('\\r\\n');\n *\t\t\t\tif (data.length > 0){\n *\t\t\t\tinput1 = data;\n *\t\t\t\t}\n *\t\t }\n *\n *\t\t function serial2Event() {\n *\t\t \t\tvar data = serial2.readStringUntil('\\r\\n');\n *\t\t\t\tif (data.length > 0){\n *\t\t\t\tinput2 = data;\n *\t\t\t\t}\n *\t\t }\n */\n  p5.SerialPort.prototype.readStringUntil = function(stringToFind) {\n\n    var stringBuffer = [];\n    //console.log(\"serialBuffer Length: \" + this.serialBuffer.length);\n    for (var i = 0; i < this.serialBuffer.length; i++) {\n      //console.log(\"push: \" + String.fromCharCode(this.serialBuffer[i]));\n      stringBuffer.push(String.fromCharCode(this.serialBuffer[i]));\n    }\n    stringBuffer = stringBuffer.join(\"\");\n    //console.log(\"stringBuffer: \" + stringBuffer);\n\n    var returnString = \"\";\n    var foundIndex = stringBuffer.indexOf(stringToFind);\n    //console.log(\"found index: \" + foundIndex);\n    if (foundIndex > -1) {\n      returnString = stringBuffer.substr(0, foundIndex);\n      this.serialBuffer = this.serialBuffer.slice(foundIndex + stringToFind.length);\n    }\n    //console.log(\"Sending: \" + returnString);\n    return returnString;\n  };\n\n\n/**\n * Returns all of the data available as an ASCII-encoded string until a line break is encountered.\n *\n * @method readLine\n * @return {String} ASCII-encoded string\n * @example\n *\n * You can use this with the included Arduino example called AnalogReadSerial.\n * Works with P5 editor as the socket/serial server, version 0.5.5 or later.\n * Written 2 Oct 2015 by Tom Igoe. For full example: <a href=\"https://github.com/vanevery/p5.serialport/tree/master/examples/readAndAnimate\">Link</a>\n *\n * \t\tfunction gotData() {\n *   \t\t  var currentString = serial.readLine();  // read the incoming data\n *\t\t\t  trim(currentString);                    // trim off trailing whitespace\n *\n *\t\t\t  if (!currentString) return; {            // if the incoming string is empty, do no more\n *\t\t\t    console.log(currentString);\n *\t\t\t    }\n *\n *\t\t\t  if (!isNaN(currentString)) {  // make sure the string is a number (i.e. NOT Not a Number (NaN))\n *\t\t\t    textXpos = currentString;   // save the currentString to use for the text position in draw()\n *\t\t\t    }\n *\t\t\t}\n */\n  p5.SerialPort.prototype.readLine = function() {\n    return this.readStringUntil(\"\\r\\n\");\n  };\n\n/**\n * Returns the number of bytes available.\n *\n * @method available\n * @return {Number} The length of the serial buffer array, in terms of number of bytes in the buffer.\n * @example\n *\t\tfunction draw() {\n *\t\t\t// black background, white text:\n *\t\t\tbackground(0);\n *\t\t\tfill(255);\n *\t\t\t// display the incoming serial data as a string:\n *\t\t\tvar displayString = \"inByte: \" + inByte + \"\\t Byte count: \" + byteCount;\n *\t\t\tdisplayString += \"  available: \" + serial.available();\n *\t\t\ttext(displayString, 30, 60);\n *\t\t\t}\n * */\n  p5.SerialPort.prototype.available = function() {\n    return this.serialBuffer.length;\n  };\n\n/**\n * Returns the last byte of data from the buffer.\n *\n * @method last\n * @return {Number}\n * @example\n *\n * */\n  p5.SerialPort.prototype.last = function() {\n    //Returns last byte received\n    var last = this.serialBuffer.pop();\n    this.serialBuffer.length = 0;\n    return last;\n  };\n\n/**\n * Returns the last byte of data from the buffer as a char.\n *\n * @method lastChar\n * @example\n *\n * */\n  p5.SerialPort.prototype.lastChar = function() {\n    return String.fromCharCode(this.last());\n  };\n\n/**\n * Clears the underlying serial buffer.\n *\n * @method clear\n * @example\n */\n  p5.SerialPort.prototype.clear = function() {\n    //Empty the buffer, removes all the data stored there.\n    this.serialBuffer.length = 0;\n  };\n\n/**\n * Stops data communication on this port.\n * Use to shut the connection when you're finished with the Serial.\n *\n * @method stop\n * @example\n *\n */\n  p5.SerialPort.prototype.stop = function() {\n  };\n\n/**\n * Tell server to close the serial port. This functions the same way as serial.on('close', portClose).\n *\n * @method close\n * @param {String} name of callback\n * @example\n *\n *\t\tvar inData;\n *\n *\t\tfunction setup() {\n *\t\t  serial.open(portOpen);\n *\t\t  serial.close(portClose);\n *\t\t}\n *\n *  \tfunction portOpen() {\n *\t\t  println('The serial port is open.');\n *\t\t}\n *\n *\t\tfunction portClose() {\n *\t\t  println('The serial port closed.');\n *\t\t}\n */\n  p5.SerialPort.prototype.close = function(cb) {\n    //\n    if (typeof cb === 'function') {\n      this.closeCallback = cb;\n    }\n    this.emit({\n      method: 'close',\n      data: {}\n    });\n  };\n\n/**\n * Register clients that connect to the serial server.\n *\n * This is for use with the p5 Serial Control application so the application\n * can access and render the names of clients who have connected. Note that\n * calling this method does not log the list of registered clients. To do that,\n * you'd use:\n * serial.on('registerClient', logClientData)\n *\n * The example demonstates the registerClient method, as well as how you'd log\n * the list of clients.\n *\n * @method registerClient\n * @example\n *\n * function setup() {\n *   // Create a new p5 Serial Port object\n *   serial = new p5.SerialPort();\n *   // List the available ports\n *   serial.list();\n *   // On port open, call the gotOpen callback\n *   serial.on('open', gotOpen);\n *   // Register the clients that have connected to the server\n *   serial.registerClient();\n *   // After registerClient method is done, call the logClientData callback\n *   serial.on('registerClient', logClientData)\n * }\n *\n * // Callback to log the client data\n * function logClientData(data) {\n *   console.log(\"Client data: \", data)\n * }\n *\n * // Callback to log a message when the port is opened\n * function gotOpen() {\n *   console.log(\"Serial port is open.\")\n * }\n */\n  // p5.SerialPort.prototype.registerClient = function(cb) {\n  //   if (typeof cb === 'function') {\n  //     this.registerCallback = cb;\n  //   }\n  //   this.emit({\n  //     method: 'registerClient',\n  //     data: {}\n  //   });\n  //   return this.clientData;\n  // };\n\n/**\n * // Register callback methods from sketch\n *\n */\n  p5.SerialPort.prototype.onData = function(_callback) {\n    this.on('data',_callback);\n  };\n\n  p5.SerialPort.prototype.onOpen = function(_callback) {\n    this.on('open',_callback);\n  };\n\n  p5.SerialPort.prototype.onClose = function(_callback) {\n    this.on('close',_callback);\n  };\n\n  p5.SerialPort.prototype.onError = function(_callback) {\n    this.on('error',_callback);\n  };\n\n  p5.SerialPort.prototype.onList = function(_callback) {\n    this.on('list',_callback);\n  };\n\n  p5.SerialPort.prototype.onConnected = function(_callback) {\n    this.on('connected',_callback);\n  };\n\n  p5.SerialPort.prototype.onRawData = function(_callback) {\n    this.on('rawdata',_callback);\n  };\n\n  // Version 2\n  p5.SerialPort.prototype.on = function(_event, _callback) {\n    if (_event == 'open') {\n      this.openCallback = _callback;\n    } else if (_event == 'data') {\n      this.dataCallback = _callback;\n    } else if (_event == 'close') {\n      this.closeCallback = _callback;\n    } else if (_event == 'error') {\n      this.errorCallback = _callback;\n    } else if (_event == 'list') {\n      this.listCallback = _callback;\n    } else if (_event == 'connected') {\n      this.connectedCallback = _callback;\n    } else if (_event == 'rawdata') {\n      this.rawDataCallback = _callback;\n    }\n  };\n}));\n","var OVERLAY_ID = '__parcel__error__overlay__';\n\nvar OldModule = module.bundle.Module;\n\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData,\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function (fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function (fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n\n  module.bundle.hotData = null;\n}\n\nmodule.bundle.Module = Module;\nvar checkedAssets, assetsToAccept;\n\nvar parent = module.bundle.parent;\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = process.env.HMR_HOSTNAME || location.hostname;\n  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';\n  var ws = new WebSocket(protocol + '://' + hostname + ':' + process.env.HMR_PORT + '/');\n  ws.onmessage = function(event) {\n    checkedAssets = {};\n    assetsToAccept = [];\n\n    var data = JSON.parse(event.data);\n\n    if (data.type === 'update') {\n      var handled = false;\n      data.assets.forEach(function(asset) {\n        if (!asset.isNew) {\n          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);\n          if (didAccept) {\n            handled = true;\n          }\n        }\n      });\n\n      // Enable HMR for CSS by default.\n      handled = handled || data.assets.every(function(asset) {\n        return asset.type === 'css' && asset.generated.js;\n      });\n\n      if (handled) {\n        console.clear();\n\n        data.assets.forEach(function (asset) {\n          hmrApply(global.parcelRequire, asset);\n        });\n\n        assetsToAccept.forEach(function (v) {\n          hmrAcceptRun(v[0], v[1]);\n        });\n      } else if (location.reload) { // `location` global exists in a web worker context but lacks `.reload()` function.\n        location.reload();\n      }\n    }\n\n    if (data.type === 'reload') {\n      ws.close();\n      ws.onclose = function () {\n        location.reload();\n      }\n    }\n\n    if (data.type === 'error-resolved') {\n      console.log('[parcel] ✨ Error resolved');\n\n      removeErrorOverlay();\n    }\n\n    if (data.type === 'error') {\n      console.error('[parcel] 🚨  ' + data.error.message + '\\n' + data.error.stack);\n\n      removeErrorOverlay();\n\n      var overlay = createErrorOverlay(data);\n      document.body.appendChild(overlay);\n    }\n  };\n}\n\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n  }\n}\n\nfunction createErrorOverlay(data) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n\n  // html encode message and stack trace\n  var message = document.createElement('div');\n  var stackTrace = document.createElement('pre');\n  message.innerText = data.error.message;\n  stackTrace.innerText = data.error.stack;\n\n  overlay.innerHTML = (\n    '<div style=\"background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;\">' +\n      '<span style=\"background: red; padding: 2px 4px; border-radius: 2px;\">ERROR</span>' +\n      '<span style=\"top: 2px; margin-left: 5px; position: relative;\">🚨</span>' +\n      '<div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">' + message.innerHTML + '</div>' +\n      '<pre>' + stackTrace.innerHTML + '</pre>' +\n    '</div>'\n  );\n\n  return overlay;\n\n}\n\nfunction getParents(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return [];\n  }\n\n  var parents = [];\n  var k, d, dep;\n\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n      if (dep === id || (Array.isArray(dep) && dep[dep.length - 1] === id)) {\n        parents.push(k);\n      }\n    }\n  }\n\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n\n  return parents;\n}\n\nfunction hmrApply(bundle, asset) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (modules[asset.id] || !bundle.parent) {\n    var fn = new Function('require', 'module', 'exports', asset.generated.js);\n    asset.isNew = !modules[asset.id];\n    modules[asset.id] = [fn, asset.deps];\n  } else if (bundle.parent) {\n    hmrApply(bundle.parent, asset);\n  }\n}\n\nfunction hmrAcceptCheck(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (!modules[id] && bundle.parent) {\n    return hmrAcceptCheck(bundle.parent, id);\n  }\n\n  if (checkedAssets[id]) {\n    return;\n  }\n  checkedAssets[id] = true;\n\n  var cached = bundle.cache[id];\n\n  assetsToAccept.push([bundle, id]);\n\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    return true;\n  }\n\n  return getParents(global.parcelRequire, id).some(function (id) {\n    return hmrAcceptCheck(global.parcelRequire, id)\n  });\n}\n\nfunction hmrAcceptRun(bundle, id) {\n  var cached = bundle.cache[id];\n  bundle.hotData = {};\n  if (cached) {\n    cached.hot.data = bundle.hotData;\n  }\n\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData);\n    });\n  }\n\n  delete bundle.cache[id];\n  bundle(id);\n\n  cached = bundle.cache[id];\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      cb();\n    });\n    return true;\n  }\n}\n"]}